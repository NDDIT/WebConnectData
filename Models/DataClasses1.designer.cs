#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ConnectToData.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="QL_Sinh_Vien1")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertHOCPHAN(HOCPHAN instance);
    partial void UpdateHOCPHAN(HOCPHAN instance);
    partial void DeleteHOCPHAN(HOCPHAN instance);
    partial void InsertKETQUA(KETQUA instance);
    partial void UpdateKETQUA(KETQUA instance);
    partial void DeleteKETQUA(KETQUA instance);
    partial void InsertKHOA(KHOA instance);
    partial void UpdateKHOA(KHOA instance);
    partial void DeleteKHOA(KHOA instance);
    partial void InsertLOP(LOP instance);
    partial void UpdateLOP(LOP instance);
    partial void DeleteLOP(LOP instance);
    partial void InsertSINHVIEN(SINHVIEN instance);
    partial void UpdateSINHVIEN(SINHVIEN instance);
    partial void DeleteSINHVIEN(SINHVIEN instance);
    #endregion
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<HOCPHAN> HOCPHANs
		{
			get
			{
				return this.GetTable<HOCPHAN>();
			}
		}
		
		public System.Data.Linq.Table<KETQUA> KETQUAs
		{
			get
			{
				return this.GetTable<KETQUA>();
			}
		}
		
		public System.Data.Linq.Table<KHOA> KHOAs
		{
			get
			{
				return this.GetTable<KHOA>();
			}
		}
		
		public System.Data.Linq.Table<LOP> LOPs
		{
			get
			{
				return this.GetTable<LOP>();
			}
		}
		
		public System.Data.Linq.Table<SINHVIEN> SINHVIENs
		{
			get
			{
				return this.GetTable<SINHVIEN>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.HOCPHAN")]
	public partial class HOCPHAN : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _MAHP;
		
		private string _TENHP;
		
		private int _SOTC;
		
		private EntitySet<KETQUA> _KETQUAs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMAHPChanging(string value);
    partial void OnMAHPChanged();
    partial void OnTENHPChanging(string value);
    partial void OnTENHPChanged();
    partial void OnSOTCChanging(int value);
    partial void OnSOTCChanged();
    #endregion
		
		public HOCPHAN()
		{
			this._KETQUAs = new EntitySet<KETQUA>(new Action<KETQUA>(this.attach_KETQUAs), new Action<KETQUA>(this.detach_KETQUAs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MAHP", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MAHP
		{
			get
			{
				return this._MAHP;
			}
			set
			{
				if ((this._MAHP != value))
				{
					this.OnMAHPChanging(value);
					this.SendPropertyChanging();
					this._MAHP = value;
					this.SendPropertyChanged("MAHP");
					this.OnMAHPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TENHP", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string TENHP
		{
			get
			{
				return this._TENHP;
			}
			set
			{
				if ((this._TENHP != value))
				{
					this.OnTENHPChanging(value);
					this.SendPropertyChanging();
					this._TENHP = value;
					this.SendPropertyChanged("TENHP");
					this.OnTENHPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SOTC", DbType="Int NOT NULL")]
		public int SOTC
		{
			get
			{
				return this._SOTC;
			}
			set
			{
				if ((this._SOTC != value))
				{
					this.OnSOTCChanging(value);
					this.SendPropertyChanging();
					this._SOTC = value;
					this.SendPropertyChanged("SOTC");
					this.OnSOTCChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="HOCPHAN_KETQUA", Storage="_KETQUAs", ThisKey="MAHP", OtherKey="MAHP")]
		public EntitySet<KETQUA> KETQUAs
		{
			get
			{
				return this._KETQUAs;
			}
			set
			{
				this._KETQUAs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_KETQUAs(KETQUA entity)
		{
			this.SendPropertyChanging();
			entity.HOCPHAN = this;
		}
		
		private void detach_KETQUAs(KETQUA entity)
		{
			this.SendPropertyChanging();
			entity.HOCPHAN = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.KETQUA")]
	public partial class KETQUA : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _MASV;
		
		private string _MAHP;
		
		private System.Nullable<double> _DIEMLAN1;
		
		private System.Nullable<double> _DIEMLAN2;
		
		private EntityRef<HOCPHAN> _HOCPHAN;
		
		private EntityRef<SINHVIEN> _SINHVIEN;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMASVChanging(string value);
    partial void OnMASVChanged();
    partial void OnMAHPChanging(string value);
    partial void OnMAHPChanged();
    partial void OnDIEMLAN1Changing(System.Nullable<double> value);
    partial void OnDIEMLAN1Changed();
    partial void OnDIEMLAN2Changing(System.Nullable<double> value);
    partial void OnDIEMLAN2Changed();
    #endregion
		
		public KETQUA()
		{
			this._HOCPHAN = default(EntityRef<HOCPHAN>);
			this._SINHVIEN = default(EntityRef<SINHVIEN>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MASV", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MASV
		{
			get
			{
				return this._MASV;
			}
			set
			{
				if ((this._MASV != value))
				{
					if (this._SINHVIEN.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMASVChanging(value);
					this.SendPropertyChanging();
					this._MASV = value;
					this.SendPropertyChanged("MASV");
					this.OnMASVChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MAHP", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MAHP
		{
			get
			{
				return this._MAHP;
			}
			set
			{
				if ((this._MAHP != value))
				{
					if (this._HOCPHAN.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMAHPChanging(value);
					this.SendPropertyChanging();
					this._MAHP = value;
					this.SendPropertyChanged("MAHP");
					this.OnMAHPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DIEMLAN1", DbType="Float")]
		public System.Nullable<double> DIEMLAN1
		{
			get
			{
				return this._DIEMLAN1;
			}
			set
			{
				if ((this._DIEMLAN1 != value))
				{
					this.OnDIEMLAN1Changing(value);
					this.SendPropertyChanging();
					this._DIEMLAN1 = value;
					this.SendPropertyChanged("DIEMLAN1");
					this.OnDIEMLAN1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DIEMLAN2", DbType="Float")]
		public System.Nullable<double> DIEMLAN2
		{
			get
			{
				return this._DIEMLAN2;
			}
			set
			{
				if ((this._DIEMLAN2 != value))
				{
					this.OnDIEMLAN2Changing(value);
					this.SendPropertyChanging();
					this._DIEMLAN2 = value;
					this.SendPropertyChanged("DIEMLAN2");
					this.OnDIEMLAN2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="HOCPHAN_KETQUA", Storage="_HOCPHAN", ThisKey="MAHP", OtherKey="MAHP", IsForeignKey=true)]
		public HOCPHAN HOCPHAN
		{
			get
			{
				return this._HOCPHAN.Entity;
			}
			set
			{
				HOCPHAN previousValue = this._HOCPHAN.Entity;
				if (((previousValue != value) 
							|| (this._HOCPHAN.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._HOCPHAN.Entity = null;
						previousValue.KETQUAs.Remove(this);
					}
					this._HOCPHAN.Entity = value;
					if ((value != null))
					{
						value.KETQUAs.Add(this);
						this._MAHP = value.MAHP;
					}
					else
					{
						this._MAHP = default(string);
					}
					this.SendPropertyChanged("HOCPHAN");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SINHVIEN_KETQUA", Storage="_SINHVIEN", ThisKey="MASV", OtherKey="MASV", IsForeignKey=true)]
		public SINHVIEN SINHVIEN
		{
			get
			{
				return this._SINHVIEN.Entity;
			}
			set
			{
				SINHVIEN previousValue = this._SINHVIEN.Entity;
				if (((previousValue != value) 
							|| (this._SINHVIEN.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SINHVIEN.Entity = null;
						previousValue.KETQUAs.Remove(this);
					}
					this._SINHVIEN.Entity = value;
					if ((value != null))
					{
						value.KETQUAs.Add(this);
						this._MASV = value.MASV;
					}
					else
					{
						this._MASV = default(string);
					}
					this.SendPropertyChanged("SINHVIEN");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.KHOA")]
	public partial class KHOA : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _MAKHOA;
		
		private string _TEKHOA;
		
		private int _SISO;
		
		private EntitySet<LOP> _LOPs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMAKHOAChanging(string value);
    partial void OnMAKHOAChanged();
    partial void OnTEKHOAChanging(string value);
    partial void OnTEKHOAChanged();
    partial void OnSISOChanging(int value);
    partial void OnSISOChanged();
    #endregion
		
		public KHOA()
		{
			this._LOPs = new EntitySet<LOP>(new Action<LOP>(this.attach_LOPs), new Action<LOP>(this.detach_LOPs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MAKHOA", DbType="Char(4) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MAKHOA
		{
			get
			{
				return this._MAKHOA;
			}
			set
			{
				if ((this._MAKHOA != value))
				{
					this.OnMAKHOAChanging(value);
					this.SendPropertyChanging();
					this._MAKHOA = value;
					this.SendPropertyChanged("MAKHOA");
					this.OnMAKHOAChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TEKHOA", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string TEKHOA
		{
			get
			{
				return this._TEKHOA;
			}
			set
			{
				if ((this._TEKHOA != value))
				{
					this.OnTEKHOAChanging(value);
					this.SendPropertyChanging();
					this._TEKHOA = value;
					this.SendPropertyChanged("TEKHOA");
					this.OnTEKHOAChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SISO", DbType="Int NOT NULL")]
		public int SISO
		{
			get
			{
				return this._SISO;
			}
			set
			{
				if ((this._SISO != value))
				{
					this.OnSISOChanging(value);
					this.SendPropertyChanging();
					this._SISO = value;
					this.SendPropertyChanged("SISO");
					this.OnSISOChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="KHOA_LOP", Storage="_LOPs", ThisKey="MAKHOA", OtherKey="MAKHOA")]
		public EntitySet<LOP> LOPs
		{
			get
			{
				return this._LOPs;
			}
			set
			{
				this._LOPs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LOPs(LOP entity)
		{
			this.SendPropertyChanging();
			entity.KHOA = this;
		}
		
		private void detach_LOPs(LOP entity)
		{
			this.SendPropertyChanging();
			entity.KHOA = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LOP")]
	public partial class LOP : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _MALOP;
		
		private string _TENLOP;
		
		private string _GVCN;
		
		private string _MAKHOA;
		
		private int _SISO;
		
		private EntitySet<SINHVIEN> _SINHVIENs;
		
		private EntityRef<KHOA> _KHOA;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMALOPChanging(string value);
    partial void OnMALOPChanged();
    partial void OnTENLOPChanging(string value);
    partial void OnTENLOPChanged();
    partial void OnGVCNChanging(string value);
    partial void OnGVCNChanged();
    partial void OnMAKHOAChanging(string value);
    partial void OnMAKHOAChanged();
    partial void OnSISOChanging(int value);
    partial void OnSISOChanged();
    #endregion
		
		public LOP()
		{
			this._SINHVIENs = new EntitySet<SINHVIEN>(new Action<SINHVIEN>(this.attach_SINHVIENs), new Action<SINHVIEN>(this.detach_SINHVIENs));
			this._KHOA = default(EntityRef<KHOA>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MALOP", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MALOP
		{
			get
			{
				return this._MALOP;
			}
			set
			{
				if ((this._MALOP != value))
				{
					this.OnMALOPChanging(value);
					this.SendPropertyChanging();
					this._MALOP = value;
					this.SendPropertyChanged("MALOP");
					this.OnMALOPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TENLOP", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string TENLOP
		{
			get
			{
				return this._TENLOP;
			}
			set
			{
				if ((this._TENLOP != value))
				{
					this.OnTENLOPChanging(value);
					this.SendPropertyChanging();
					this._TENLOP = value;
					this.SendPropertyChanged("TENLOP");
					this.OnTENLOPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GVCN", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string GVCN
		{
			get
			{
				return this._GVCN;
			}
			set
			{
				if ((this._GVCN != value))
				{
					this.OnGVCNChanging(value);
					this.SendPropertyChanging();
					this._GVCN = value;
					this.SendPropertyChanged("GVCN");
					this.OnGVCNChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MAKHOA", DbType="Char(4)")]
		public string MAKHOA
		{
			get
			{
				return this._MAKHOA;
			}
			set
			{
				if ((this._MAKHOA != value))
				{
					if (this._KHOA.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMAKHOAChanging(value);
					this.SendPropertyChanging();
					this._MAKHOA = value;
					this.SendPropertyChanged("MAKHOA");
					this.OnMAKHOAChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SISO", DbType="Int NOT NULL")]
		public int SISO
		{
			get
			{
				return this._SISO;
			}
			set
			{
				if ((this._SISO != value))
				{
					this.OnSISOChanging(value);
					this.SendPropertyChanging();
					this._SISO = value;
					this.SendPropertyChanged("SISO");
					this.OnSISOChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LOP_SINHVIEN", Storage="_SINHVIENs", ThisKey="MALOP", OtherKey="MALOP")]
		public EntitySet<SINHVIEN> SINHVIENs
		{
			get
			{
				return this._SINHVIENs;
			}
			set
			{
				this._SINHVIENs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="KHOA_LOP", Storage="_KHOA", ThisKey="MAKHOA", OtherKey="MAKHOA", IsForeignKey=true)]
		public KHOA KHOA
		{
			get
			{
				return this._KHOA.Entity;
			}
			set
			{
				KHOA previousValue = this._KHOA.Entity;
				if (((previousValue != value) 
							|| (this._KHOA.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._KHOA.Entity = null;
						previousValue.LOPs.Remove(this);
					}
					this._KHOA.Entity = value;
					if ((value != null))
					{
						value.LOPs.Add(this);
						this._MAKHOA = value.MAKHOA;
					}
					else
					{
						this._MAKHOA = default(string);
					}
					this.SendPropertyChanged("KHOA");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SINHVIENs(SINHVIEN entity)
		{
			this.SendPropertyChanging();
			entity.LOP = this;
		}
		
		private void detach_SINHVIENs(SINHVIEN entity)
		{
			this.SendPropertyChanging();
			entity.LOP = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SINHVIEN")]
	public partial class SINHVIEN : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _MASV;
		
		private string _HODEM;
		
		private string _TEN;
		
		private bool _PHAI;
		
		private System.DateTime _NGAYSINH;
		
		private string _DIACHI;
		
		private string _DIENTHOAI;
		
		private string _MALOP;
		
		private System.Nullable<int> _CMND;
		
		private EntitySet<KETQUA> _KETQUAs;
		
		private EntityRef<LOP> _LOP;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMASVChanging(string value);
    partial void OnMASVChanged();
    partial void OnHODEMChanging(string value);
    partial void OnHODEMChanged();
    partial void OnTENChanging(string value);
    partial void OnTENChanged();
    partial void OnPHAIChanging(bool value);
    partial void OnPHAIChanged();
    partial void OnNGAYSINHChanging(System.DateTime value);
    partial void OnNGAYSINHChanged();
    partial void OnDIACHIChanging(string value);
    partial void OnDIACHIChanged();
    partial void OnDIENTHOAIChanging(string value);
    partial void OnDIENTHOAIChanged();
    partial void OnMALOPChanging(string value);
    partial void OnMALOPChanged();
    partial void OnCMNDChanging(System.Nullable<int> value);
    partial void OnCMNDChanged();
    #endregion
		
		public SINHVIEN()
		{
			this._KETQUAs = new EntitySet<KETQUA>(new Action<KETQUA>(this.attach_KETQUAs), new Action<KETQUA>(this.detach_KETQUAs));
			this._LOP = default(EntityRef<LOP>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MASV", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MASV
		{
			get
			{
				return this._MASV;
			}
			set
			{
				if ((this._MASV != value))
				{
					this.OnMASVChanging(value);
					this.SendPropertyChanging();
					this._MASV = value;
					this.SendPropertyChanged("MASV");
					this.OnMASVChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HODEM", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string HODEM
		{
			get
			{
				return this._HODEM;
			}
			set
			{
				if ((this._HODEM != value))
				{
					this.OnHODEMChanging(value);
					this.SendPropertyChanging();
					this._HODEM = value;
					this.SendPropertyChanged("HODEM");
					this.OnHODEMChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TEN", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string TEN
		{
			get
			{
				return this._TEN;
			}
			set
			{
				if ((this._TEN != value))
				{
					this.OnTENChanging(value);
					this.SendPropertyChanging();
					this._TEN = value;
					this.SendPropertyChanged("TEN");
					this.OnTENChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PHAI", DbType="Bit NOT NULL")]
		public bool PHAI
		{
			get
			{
				return this._PHAI;
			}
			set
			{
				if ((this._PHAI != value))
				{
					this.OnPHAIChanging(value);
					this.SendPropertyChanging();
					this._PHAI = value;
					this.SendPropertyChanged("PHAI");
					this.OnPHAIChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NGAYSINH", DbType="Date NOT NULL")]
		public System.DateTime NGAYSINH
		{
			get
			{
				return this._NGAYSINH;
			}
			set
			{
				if ((this._NGAYSINH != value))
				{
					this.OnNGAYSINHChanging(value);
					this.SendPropertyChanging();
					this._NGAYSINH = value;
					this.SendPropertyChanged("NGAYSINH");
					this.OnNGAYSINHChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DIACHI", DbType="NVarChar(50)")]
		public string DIACHI
		{
			get
			{
				return this._DIACHI;
			}
			set
			{
				if ((this._DIACHI != value))
				{
					this.OnDIACHIChanging(value);
					this.SendPropertyChanging();
					this._DIACHI = value;
					this.SendPropertyChanged("DIACHI");
					this.OnDIACHIChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DIENTHOAI", DbType="NVarChar(14)")]
		public string DIENTHOAI
		{
			get
			{
				return this._DIENTHOAI;
			}
			set
			{
				if ((this._DIENTHOAI != value))
				{
					this.OnDIENTHOAIChanging(value);
					this.SendPropertyChanging();
					this._DIENTHOAI = value;
					this.SendPropertyChanged("DIENTHOAI");
					this.OnDIENTHOAIChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MALOP", DbType="VarChar(10)")]
		public string MALOP
		{
			get
			{
				return this._MALOP;
			}
			set
			{
				if ((this._MALOP != value))
				{
					if (this._LOP.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMALOPChanging(value);
					this.SendPropertyChanging();
					this._MALOP = value;
					this.SendPropertyChanged("MALOP");
					this.OnMALOPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CMND", DbType="Int")]
		public System.Nullable<int> CMND
		{
			get
			{
				return this._CMND;
			}
			set
			{
				if ((this._CMND != value))
				{
					this.OnCMNDChanging(value);
					this.SendPropertyChanging();
					this._CMND = value;
					this.SendPropertyChanged("CMND");
					this.OnCMNDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SINHVIEN_KETQUA", Storage="_KETQUAs", ThisKey="MASV", OtherKey="MASV")]
		public EntitySet<KETQUA> KETQUAs
		{
			get
			{
				return this._KETQUAs;
			}
			set
			{
				this._KETQUAs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LOP_SINHVIEN", Storage="_LOP", ThisKey="MALOP", OtherKey="MALOP", IsForeignKey=true)]
		public LOP LOP
		{
			get
			{
				return this._LOP.Entity;
			}
			set
			{
				LOP previousValue = this._LOP.Entity;
				if (((previousValue != value) 
							|| (this._LOP.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LOP.Entity = null;
						previousValue.SINHVIENs.Remove(this);
					}
					this._LOP.Entity = value;
					if ((value != null))
					{
						value.SINHVIENs.Add(this);
						this._MALOP = value.MALOP;
					}
					else
					{
						this._MALOP = default(string);
					}
					this.SendPropertyChanged("LOP");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_KETQUAs(KETQUA entity)
		{
			this.SendPropertyChanging();
			entity.SINHVIEN = this;
		}
		
		private void detach_KETQUAs(KETQUA entity)
		{
			this.SendPropertyChanging();
			entity.SINHVIEN = null;
		}
	}
}
#pragma warning restore 1591
